import { Request, Response } from "express";
import Reponse from "../models/reponseModel";
import Post from "../models/postModel";
import { IUser } from "../models/userModel";
import { updatePopularityScore } from "./postController";

interface AuthRequest extends Request {
  user?: IUser;
}

/**
 * Cr√©e une nouvelle r√©ponse (√† un post ou √† une r√©ponse)
 * @route POST /api/reponse/:id
 * @access Private - Requiert authentification
 */
export const createReponse = async (req: AuthRequest, res: Response): Promise<void> => {
  console.log(`üìù Tentative de cr√©ation d'une nouvelle r√©ponse`);
  
  try {
    const { texte, media } = req.body;
    const { id } = req.params; 
    
    if (!req.user) {
      console.log(`üîí Acc√®s refus√©: utilisateur non connect√©`);
      res.status(401).json({
        success: false,
        message: "Non autoris√©, veuillez vous connecter"
      });
      return;
    }

    // V√©rifier d'abord si c'est un post
    let post = await Post.findById(id);
    let postId = id;
    let parentReplyId = null;

    // Si ce n'est pas un post, v√©rifier si c'est une r√©ponse
    if (!post) {
      const parentReponse = await Reponse.findById(id);
      if (!parentReponse) {
        console.log(`‚ùå Ni post ni r√©ponse trouv√© avec l'ID: ${id}`);
        res.status(404).json({
          success: false,
          message: "Post ou r√©ponse non trouv√©"
        });
        return;
      }

      // C'est une r√©ponse, on r√©cup√®re le post_id associ√©
      postId = parentReponse.post_id.toString();
      parentReplyId = id;

      // V√©rifier que le post existe toujours
      post = await Post.findById(postId);
      if (!post) {
        console.log(`‚ùå Post parent non trouv√© avec l'ID: ${postId}`);
        res.status(404).json({
          success: false,
          message: "Post parent non trouv√©"
        });
        return;
      }
    }

    if (!texte) {
      console.log(`‚ùå Tentative de cr√©ation d'une r√©ponse sans texte`);
      res.status(400).json({
        success: false,
        message: "Le texte de la r√©ponse est requis"
      });
      return;
    }

    // Cr√©er la nouvelle r√©ponse
    console.log(`üíæ Enregistrement de la r√©ponse en base de donn√©es...`);
    const reponse = await Reponse.create({
      post_id: postId,
      user_id: req.user._id,
      parent_reply_id: parentReplyId,
      texte,
      media
    });

    await updatePopularityScore(postId);

    // Populer la r√©ponse avec les informations n√©cessaires
    await reponse.populate([
      {
        path: 'user_id',
        select: 'username hashtag pdp'
      },
      {
        path: 'parent_reply_id',
        select: 'texte user_id',
        populate: {
          path: 'user_id',
          select: 'username hashtag'
        }
      }
    ]);

    // Incr√©menter le compteur de r√©ponses du post
    await Post.findByIdAndUpdate(postId, { $inc: { replyCount: 1 } });

    console.log(`‚úÖ R√©ponse cr√©√©e avec succ√®s! ID: ${reponse._id}`);
    res.status(201).json({
      success: true,
      message: "R√©ponse cr√©√©e avec succ√®s",
      data: reponse
    });

  } catch (error) {
    console.error(`üí• Erreur lors de la cr√©ation de la r√©ponse: ${(error as Error).message}`);
    res.status(500).json({
      success: false,
      message: "Erreur serveur lors de la cr√©ation de la r√©ponse",
      error: (error as Error).message
    });
  }
};

/**
 * R√©cup√®re les r√©ponses d'un post avec pagination
 * @route GET /api/reponse/:postId
 * @access Private - Requiert authentification
 */
export const getPostReplies = async (req: AuthRequest, res: Response): Promise<void> => {
  const { postId } = req.params;
  console.log(`üîç R√©cup√©ration des r√©ponses du post ID: ${postId}`);

  try {
    // Param√®tres de pagination
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;
    const skip = (page - 1) * limit;

    const reponses = await Reponse.find({ post_id: postId })
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .populate('user_id', 'username hashtag pdp');

    res.status(200).json({
      success: true,
      data: reponses
    });

  } catch (error) {
    console.error(`üí• Erreur lors de la r√©cup√©ration des r√©ponses: ${(error as Error).message}`);
    res.status(500).json({
      success: false,
      message: "Erreur serveur lors de la r√©cup√©ration des r√©ponses",
      error: (error as Error).message
    });
  }
};

/**
 * Compte le nombre total de r√©ponses √† un post (incluant les r√©ponses imbriqu√©es)
 * @route GET /api/reponse/count/post/:postId
 * @access Public
 */
export const getPostReplyCount = async (req: Request, res: Response): Promise<void> => {
  try {
    const { postId } = req.params;
    const count = await Reponse.countDocuments({ post_id: postId });

    res.status(200).json({
      success: true,
      data: { count }
    });
  } catch (error) {
    console.error(`üí• Erreur lors du comptage des r√©ponses: ${(error as Error).message}`);
    res.status(500).json({
      success: false,
      message: "Erreur serveur lors du comptage des r√©ponses",
      error: (error as Error).message
    });
  }
};

/**
 * Compte le nombre de r√©ponses √† une r√©ponse sp√©cifique
 * @route GET /api/reponse/count/reply/:replyId
 * @access Public
 */
export const getReplyCount = async (req: Request, res: Response): Promise<void> => {
  try {
    const { replyId } = req.params;
    const count = await Reponse.countDocuments({ parent_reply_id: replyId });

    res.status(200).json({
      success: true,
      data: { count }
    });
  } catch (error) {
    console.error(`üí• Erreur lors du comptage des r√©ponses: ${(error as Error).message}`);
    res.status(500).json({
      success: false,
      message: "Erreur serveur lors du comptage des r√©ponses",
      error: (error as Error).message
    });
  }
};

/**
 * R√©cup√®re les r√©ponses imbriqu√©es (r√©ponses √† une r√©ponse)
 * @route GET /api/reponse/thread/:reponseId
 * @access Private - Requiert authentification
 */
export const getThreadedReplies = async (req: AuthRequest, res: Response): Promise<void> => {
  const { reponseId } = req.params;
  console.log(`üîç R√©cup√©ration des r√©ponses imbriqu√©es pour la r√©ponse ID: ${reponseId}`);

  try {
    const reponses = await Reponse.find({ parent_reply_id: reponseId })
      .sort({ createdAt: -1 })
      .populate('user_id', 'username hashtag pdp');

    console.log(`üìä ${reponses.length} r√©ponses imbriqu√©es trouv√©es`);
    res.status(200).json({
      success: true,
      count: reponses.length,
      data: reponses
    });

  } catch (error) {
    console.error(`üí• Erreur lors de la r√©cup√©ration des r√©ponses imbriqu√©es: ${(error as Error).message}`);
    res.status(500).json({
      success: false,
      message: "Erreur serveur lors de la r√©cup√©ration des r√©ponses",
      error: (error as Error).message
    });
  }
};